///////////////////Data Flow and stuff


Types of states:
    Application state
        scoreboard eg: players and scores
    Component State
        component to function, usually only visible in component


Most of stuff so far is application states.

Application doesn't keep instance of players, just says, they should exist with these properties


    Now it re-renders the new children components with new properties when it updates

Unidirectional dataflow:
    Component uses data passed to it to pass data from children
    DATA COMES TO PARENT, CASCADES THROUGH DOM TREE TO COMPONENTS
    uses events, as callback functions, to update state
        child executes callback function, which may call other callback functions, telling the application to update

#############  Counter is stateful component right now
    back to functional component right now.
        changed this.state back to props
        Added PropTypes
        removed onClick

        change Component in player from <Counter initialScore=... to score... >

    !!!!!!!!convert application into stateful component
        doing this because players can change, as well as scores, so Application
        should have an overall state.

        do it like this:

        Application = React.createClass({
            render: function(){
                <COPONENTS FOR APP>//Change props to this.props
            },
            propTypes: {
                ...

            }

            getDefaultProps: function(){
                return {
                    title:whatever.
                }
            } //Kind of like getInitialState

        })
        ###move players to stateful stuff
        on Application Class:
            getInitialState:
            return
                players:this.props.initialPlayers
                // turn call to initialPlayers, change in prop types as well
            change this.props.players to this.state.players

############ Implement Counter functionality - CALL BACK functions
    counter propTypes
        add onChange function : react.PropTypes.func.isRequired
        onChange will take a number that is the number to change the thing by
    button onClick={function(){props.onChange(-1);};} //-1 b/c decrement, +1 for inc.

    counter is created on player, which has no state right now.
        player needs to send information up, with another callback function
        propTypes
            onScoreChange react.PropTypes.func.isRequired
        <Counter onChange={props.onScoreChange}>

    now on Application
        player mapping
            add onScoreChange to player, onScoreChange={this.onScoreChange}
            !!!!!!!!!!!!!!!!!!!!!!IMPORTANT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            //inside of function in map iterator, this points to iterator.
            .bind(this) on iterator FUNCTION (after '}'), binds "this" to "this" in outside.
        now add onScoreChange function to this, that takes in a number (called 'delta' in the example.)
